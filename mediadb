#!/usr/bin/python3

import sys
import os
import os.path
import argparse
import sqlite3

def do_init():
	db = sqlite3.connect('./mediadb.db')

	db.execute('''CREATE TABLE resource (
		id    INTEGER PRIMARY KEY AUTOINCREMENT,
		type  INTEGER NOT NULL, -- 0 = dir, 1 = file
		name  TEXT NOT NULL,
		path  TEXT NOT NULL,
		title TEXT,             -- short description
		desc  TEXT               -- long description

		UNIQUE (name, path)
	)''')

	db.execute('''CREATE TABLE tag (
        id    INTEGER PRIMARY KEY,
        name  TEXT UNIQUE
    )''')

	db.execute('''CREATE TABLE rtag (
		res_id INTEGER NOT NULL,
        tag_id INTEGER NOT NULL,

		PRIMARY KEY (res_id, tag_id),
		FOREIGN KEY (res_id) REFERENCES resource (id) ON DELETE CASCADE,
		FOREIGN KEY (tag_id) REFERENCES tag      (id) ON DELETE CASCADE
    )''')

	db.commit()
	db.close()

def do_index():
	parser = argparse.ArgumentParser(description='')
	parser.add_argument('--path') 
	parser.add_argument('--mode') 
	parser.add_argument('--tags') 
	args = vars(parser.parse_args(sys.argv[2:]))
	print(args)

	path = os.path.abspath(os.path.expanduser(args['path']))
	mode = args['mode']
	tags = [x.strip() for x in args['tags'].split(',')]

	db = sqlite3.connect('./mediadb.db')
	c = db.cursor()

	# tags resolution
	c.execute("SELECT * FROM tag WHERE name IN ({0})".format(','.join(["'{0}'".format(x) for x in tags])))
	dbtags = dict(c)

	for t in set(tags).difference(dbtags.values()):
		c.execute('''INSERT INTO tag VALUES (NULL, ?)''', (t,))
		dbtags[c.lastrowid] = t
	db.commit()
	print(dbtags)

	print(path, mode)

	for root, dirs, files in os.walk(path):
		if mode == 'file':
			for name in files:
				c.execute('''INSERT INTO resource VALUES (NULL, 1, ?, ?)''', (name, root))
				rid = c.lastrowid
				print(name, rid)

				for tid in dbtags.keys():
					c.execute('''INSERT INTO rtag VALUES (?,?)''', (rid, tid))

	db.commit()
	db.close()

def do_search() 

if __name__ == '__main__':
	print(sys.argv[1]);
	action = sys.argv[1]

	try:
		fun = eval('do_' + action)
	except NameError:
		print("Unknown *{0}* action".format(action))
		sys.exit(1)

	fun()

